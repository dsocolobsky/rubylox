module Rubylox
  type statement = ExpressionStmt | PrintStmt |
    FunctionStmt | BlockStmt | IfStmt | WhileStmt

  class ExpressionStmt
    def initialize: (expression) -> void

    attr_reader expression: expression

    def accept: (Interpreter visitor) -> void
  end

  class PrintStmt
    def initialize: (expression) -> void

    attr_reader expression: expression

    def accept: (Interpreter visitor) -> void
  end

  class VariableStmt
    def initialize: (Token, expression?) -> void

    attr_reader name: Token
    attr_reader initializer: expression

    def accept: (Interpreter visitor) -> void
  end

  class BlockStmt
    def initialize: (Array[statement]) -> void

    attr_reader statements: Array[statement]

    def accept: (Interpreter visitor) -> void
  end

  class IfStmt
    def initialize: (expression, statement, statement?) -> void

    attr_reader condition: expression
    attr_reader then_branch: statement
    attr_reader else_branch: statement

    def accept: (Interpreter visitor) -> void
  end

  class WhileStmt
    def initialize: (expression condition, Array[statement] body) -> void

    attr_reader condition: expression
    attr_reader body: statement

    def accept: (Interpreter visitor) -> void
  end

  class FunctionStmt
    def initialize: (Token name, Array[Token] parameters, Array[statement] body) -> void

    attr_reader name: Token
    attr_reader parameters: Array[Token]
    attr_reader body: Array[statement]

    def accept: (Interpreter visitor) -> void
  end
end
