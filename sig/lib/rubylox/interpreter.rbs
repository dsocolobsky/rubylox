module Rubylox
  class Interpreter
    attr_reader environment: Environment
    attr_reader globals: Environment
    attr_reader locals: ::Hash[expression, Integer]

    def initialize: () -> void
    def interpret: (Array[statement]) -> untyped

    def execute_block: (Array[statement], Environment) -> void
    def execute: (statement) -> void
    def resolve: (expression, int) -> void

    def visit_expression_statement: (ExpressionStmt) -> void
    def visit_block_statement: (BlockStmt) -> void
    def visit_if_statement: (IfStmt) -> void
    def visit_print_statement: (PrintStmt) -> void
    def visit_variable_statement: (VariableStmt) -> void
    def visit_function_statement: (FunctionStmt) -> untyped
    def visit_return_statement: (ReturnStmt) -> untyped
    def visit_while_statement: (WhileStmt) -> untyped
    def visit_class_statement: (ClassStmt) -> void

    def visit_literal_expression: (LiteralExpression) -> untyped
    def visit_variable_expression: (VariableExpression) -> untyped
    def lookup_variable: (Token, expression) -> Object
    def visit_assignment_expression: (AssignExpression) -> untyped
    def visit_grouping_expression: (GroupingExpression) -> untyped
    def visit_unary_expression: (UnaryExpression) -> untyped
    def visit_binary_expression: (BinaryExpression) -> untyped
    def visit_logical_expression: (LogicalExpression) -> untyped
    def visit_call_expression: (CallExpression) -> untyped
    def visit_get_expression: (GetExpression) -> untyped
    def visit_set_expression: (SetExpression) -> void
    def visit_super_expression: (SuperExpression) -> void
    def visit_this_expression: (ThisExpression) -> Object

    def evaluate: (expression) -> untyped
    def is_truthy: (untyped object) -> bool
  end
end
