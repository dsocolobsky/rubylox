module Rubylox
  type expression = GroupingExpression | LiteralExpression | VariableExpression | UnaryExpression |
    BinaryExpression | AssignExpression

  class GroupingExpression
    def initialize: (expression) -> void
    attr_reader expression: expression
    def accept: (untyped visitor) -> void
  end

  class LiteralExpression
    def initialize: (untyped value) -> void
    attr_reader value: untyped
    def accept: (untyped visitor) -> void
  end

  class VariableExpression
    def initialize: (Token) -> void
    attr_reader name: Token
    def accept: (untyped visitor) -> void
  end

  class UnaryExpression
    def initialize: (Token operator, expression right) -> void

    attr_reader operator: Token
    attr_reader right: expression

    def accept: (untyped visitor) -> void
  end

  class BinaryExpression
    def initialize: (expression left, Token operator, expression right) -> void

    attr_reader left: expression
    attr_reader operator: Token
    attr_reader right: expression

    def accept: (untyped visitor) -> void
  end

  class LogicalExpression
    def initialize: (expression left, Token operator, expression right) -> void

    attr_reader left: expression
    attr_reader operator: Token
    attr_reader right: expression

    def accept: (untyped visitor) -> void
  end

  class AssignExpression
    def initialize: (Token name, expression value) -> void

    attr_reader name: Token
    attr_reader value: expression

    def accept: (untyped visitor) -> void
  end
end
